
/*
--==============================================================================
Quality Checks
--==============================================================================
Script Purpose:
  This script performs various quality checks for data consistency,
  accuracy and standardization across the 'silver' schema. It includes checks for:
  -Null or duplicate primary keys
  -Unwanted spaces in sring fields
  -Data standardization and consistency
  -Data consistency between related fields

Usage Notes:
  -Run these checks after data loading into silver layer
  -Investigate and resolve any discrepancies found during checks
--=============================================================================
*/

--==========================================
--CHECK silver.crm_cust_info
--==========================================

--Check for Nulls and Duplicates in Primary key
--Expectation: No Result

SELECT
	cst_id,
	COUNT(*)
FROM silver.crm_cust_info
GROUP BY cst_id
HAVING COUNT(*) > 1 OR cst_id IS NULL

--RANK THE DATA USING ROW_NUMBER() IN ORDER TO REMOVE DUPLICATES
SELECT
*
FROM
(
	SELECT
	*,
	ROW_NUMBER() OVER (PARTITION BY cst_id ORDER BY cst_create_date DESC) as flag_last
	FROM silver.crm_cust_info
	WHERE cst_id IS NOT NULL
) t
WHERE flag_last = 1

--Check for unwanted Spaces
--Expectation: No Results
SELECT
  cst_firstname
FROM silver.crm_cust_info
WHERE cst_firstname != TRIM(cst_firstname)

SELECT
  cst_lastname
FROM silver.crm_cust_info
WHERE cst_lastname != TRIM(cst_lastname)

SELECT
  cst_key
FROM silver.crm_cust_info
WHERE cst_key != TRIM(cst_key)
SELECT
  cst_gndr
FROM silver.crm_cust_info
WHERE cst_gndr != TRIM(cst_gndr)
--cst_gndr column shows no results which means the data quality is good

--TRANSFORMATION TO CLEAN UP THE AFFECTED COLUMNS
SELECT
	cst_id,
	cst_key,
	TRIM(cst_firstname) AS cst_firstname,
	TRIM(cst_lastname) AS cst_lastname,
	cst_material_status,
	cst_gndr,
	cst_create_date
FROM 
(
	SELECT
	*,
	ROW_NUMBER() OVER (PARTITION BY cst_id ORDER BY cst_create_date DESC) as flag_last
	FROM bronze.crm_cust_info
	WHERE cst_id IS NOT NULL
) t
WHERE flag_last = 1

--Data Standardization and Consistency--

SELECT DISTINCT
  cst_gndr
FROM silver.crm_cust_info;

SELECT DISTINCT 
  cst_material_status
FROM silver.crm_cust_info

--==========================================
--CHECK silver.crm_prd_info
--==========================================
--Check for Nulls and Duplicates in Primary key in Silver Layer
--Expectation: No Result
SELECT
	prd_id,
	COUNT(*)
FROM silver.crm_prd_info
GROUP BY prd_id
HAVING COUNT(*) > 1 OR prd_id IS NULL

--Check for unwanted Spaces
--Expectation: No Results
SELECT
  prd_nm
FROM silver.crm_prd_info
WHERE prd_nm != TRIM(prd_nm);

--Check for NULLs or Negative Numbers
--Expectation: No Results
SELECT
  prd_cost
FROM silver.crm_prd_info
WHERE prd_cost < 0 OR prd_cost IS NULL

--Replace the Null values with 0 using ISNULL()
--ISNULL(prd_cost, 0) 
--You can also use COALESCE()

--Data Standardization and Consistency
SELECT DISTINCT 
  prd_line
FROM silver.crm_prd_info;

--Check for Invalid Date Orders
SELECT
*
FROM bronze.crm_prd_info
WHERE prd_end_dt < prd_start_dt

--Check for NULLs or Negative Numbers
--Expectation: No Results
SELECT
  prd_cost
FROM silver.crm_prd_info
WHERE prd_cost < 0 OR prd_cost IS NULL

--Check for unwanted Spaces
--Expectation: No Results
SELECT
  prd_nm
FROM silver.crm_prd_info
WHERE prd_nm != TRIM(prd_nm);

--Data Standardization and Consistency
SELECT DISTINCT
  prd_line
FROM silver.crm_prd_info;

--Check for Invalid Date Orders (Start Date > End Date)
Expectation: No Results
SELECT
*
FROM silver.crm_prd_info
WHERE prd_end_dt < prd_start_dt

--==========================================
--CHECK silver.crm_sales_details
--==========================================
--Sales = Quantity * Price
--Values must not be NULL, Zero or Negative
--Rules: 
--If sales is negative, zero or null, derive it using Quantity * Price
--If price is zero or null, calculate it using Sales * Quantity
--If price is negative, convert it to a positive
--NULLIF(sls_quantity, 0) >> This query replaces any 0 within sls_quantity column with NULL

SELECT DISTINCT
	sls_sales,
	sls_quantity,
	sls_price
FROM silver.crm_sales_details
WHERE sls_sales != sls_quantity * sls_price
OR sls_sales IS NULL OR sls_quantity IS NULL OR sls_price IS NULL
OR sls_sales <= 0 OR sls_quantity <= 0 OR sls_price <= 0
ORDER BY sls_sales, sls_quantity, sls_price

--Check for unwanted Spaces
--Expectation: No Results
SELECT
  sls_ord_num
FROM silver.crm_sales_details
WHERE sls_ord_num != TRIM(sls_ord_num);

--CHECK IF PRODUCT KEY IN SALES DETAILS CAN BE USED WITH PRODUCT INFO
SELECT
	*
FROM bronze.crm_sales_details
WHERE sls_prd_key NOT IN (SELECT sls_prd_key FROM silver.crm_prd_info)

SELECT
	*
FROM bronze.crm_sales_details
WHERE sls_cust_id NOT IN (SELECT cst_id FROM silver.crm_cust_info)

--Check for Invalid Date
--There is a lot of 0, so use NULLIF() to replace the 0s with NULL
--Date has eight places(20250612 which is 8 lengths), use LEN(sls_order_dt) != 8 to confirm that
--Check for outliers by validating the boundaries of the date range, use sls_order_dt > 20500101
SELECT
  NULLIF(sls_order_dt, 0) AS sls_order_dt
FROM silver.crm_sales_details
WHERE sls_order_dt <= 0
OR LEN(sls_order_dt) != 8
OR sls_order_dt > 20500101
OR sls_order_dt < 19000101

--Check for Invalid Date
--Expectation: No Results
SELECT
  sls_ship_dt
FROM silver.crm_sales_details
WHERE sls_ship_dt <= 0
OR LEN(sls_ship_dt) != 8
OR sls_ship_dt > 20500101
OR sls_ship_dt < 19000101

--Check for Invalid Date
--Expectation: No Results
SELECT
  NULLIF(sls_due_dt) AS sls_due_dt
FROM silver.crm_sales_details
WHERE sls_due_dt <= 0
  OR LEN(sls_due_dt) != 8
  OR sls_due_dt > 20500101
  OR sls_due_dt < 19000101

--Check for Invalid Date Orders (Order Date > Shipping/Due Dates)
--Expectation: No Results
SELECT
*
FROM silver.crm_sales_details
WHERE sls_order_dt > sls_ship_dt 
  OR sls_order_dt > sls_due_dt

--Data Consistency: Sales = Quantity * Price
Expectation: No Results
SELECT DISTINCT
sls_sales,
sls_quantity,
sls_price
FROM silver.crm_sales_details
WHERE sls_sales != sls_quantity * sls_price
  OR sls_sales IS NULL
  OR sls_quantity IS NULL
  OR sls_price IS NULL
  OR sls_sales <= 0
  OR sls_quantity <= 0
  OR sls_price <= 0
ORDER BY sls_sales, sls_quantity, sls_price

--==========================================
--CHECK silver.erp_cust_az12
--==========================================
--Identify out of range dates
--Expectation: Birthdates between 1924-01-01 and Today
SELECT DISTINCT
bdate
FROM silver.erp_cust_az12
WHERE bdate < '1925-01-01' OR bdate > GETDATE()

--Data Standardization & Consistency
SELECT DISTINCT
gen
FROM silver.erp_cust_az12

--==========================================
--CHECK silver.erp_loc_a101
--==========================================
--Data Standardization & Consistency
SELECT DISTINCT
cntry
FROM bronze.erp_loc_a101
ORDER BY cntry

--==========================================
--CHECK silver.erp_px_cat_g1v2
--==========================================
--Check for unwanted spaces
--Expectation: No Results
SELECT
*
FROM silver.erp_px_cat_g1v2
WHERE cat != TRIM(cat) OR subcat != TRIM(subcat) OR maintenance != TRIM(maintenance)
--=======================================
--Data standardization & consistency
SELECT DISTINCT
cat
FROM silver.erp_px_cat_g1v2;

SELECT DISTINCT
subcat
FROM silver.erp_px_cat_g1v2;

SELECT DISTINCT
maintenance
FROM silver.erp_px_cat_g1v2
